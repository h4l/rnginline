#!/usr/bin/env bash

# Introspect the running devcontainer to find the volume mounted at /workspaces
# We use this to mount the project's volume into the docker compose test
# containers.
devcontainer_volume=$(\
    (docker container inspect "$(hostname)" 2>/dev/null || true) \
    | jq -r '.[].HostConfig.Mounts[] | select(.Target == "/workspaces") | .Source'
)

# If we found a docker volume mounted at /workspaces in our container, assume
# we're using a devcontainer project in a volume. So we mount the volume into
# the docker compose test containers, to give them access to the project files.
if [[ $devcontainer_volume != "" ]]; then
    RNGINLINE_DEVCONTAINER_VOLUME=$(\
        docker container inspect "$(hostname)" \
        | jq -er '.[].HostConfig.Mounts[] | select(.Target == "/workspaces") | .Source'
    )
    export RNGINLINE_DEVCONTAINER_VOLUME

    # Include the devcontainer compose config overrides when running docker compose
    export COMPOSE_FILE="docker/docker-compose.json:docker/docker-compose.devcontainer.json"
else
    # For a project on the host filesystem (not using a container volume), we
    # can mount the directory directly.
    export COMPOSE_FILE="docker/docker-compose.json:docker/docker-compose.local.json"
fi

# The uid to use in the Python containers used to run tests on various python versions.
RNGINLINE_DOCKER_USER_UID=$(id -u)
export RNGINLINE_DOCKER_USER_UID

watch_file dist
RNGINLINE_DISTRIBUTION_FILES=$(\
    [[ -d dist ]] && find dist -maxdepth 1 -name '*.whl' -o -name '*.tar.gz'
)
export RNGINLINE_DISTRIBUTION_FILES
